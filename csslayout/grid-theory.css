.father{
    display: grid; /*flex와 마찬가지로 부모요소에 display:grid를 지정하고 아래 자식요소들을 컨트롤함.  격자무늬*/
    /*그리고 그리드는 flex-warp:wrap 과 같이 지정해둔 열의 크기를 넘어가면 자동으로 아래줄로 다음 요소가 들어감.*/
    grid-template-columns: 250px 250px 250px 250px;  /*repeat(4, 250px)로 대체 가능*/ /*auto는 가능한 만큼 크게!*/ /*column이 수직이라고 가정하면
    수직 방향으로 4개의 행을 만들고 각 크기를 250px로 만든다!*/
    grid-template-rows: 100px repeat(3, 200px); /* 수평방향이라고 가정하면 4개의 열을 만들고 크기를 첫번째 열은 100px 나머지 3개 열은 200px 크기로.*/
    column-gap: 10px; /* 각 행마다 10px의 간격을 둠. */
    row-gap: 10px;/*각 열마다 10px간격을 둠.*/
    /*gap: 10px; *//*column과 row를 각각 안쓰고 한번에 쓸때 사용*/
    grid-template-areas:  /*그리드만 이용해서 layout을 만들 수 잇음!!*/
    "header header header header"
    "content content . nav" /* . 이 있는 공간은 빈 칸이 됨.*/
    "content content content nav"
    "footer footer footer footer";  /*이렇게 하면 아무런 변화가 안생김. 이유는 header와content, nav, footer가 뭔지를 모르기 때문
    그래서 각 요소에 grid-area지정을 해줘야 함. 아래 참고!!*/
}

.header{
    grid-area: header;
}
.content{
    grid-area: content;
}
.nav{
    grid-area: nav;
}
.footer{
    grid-area: footer;
}

/*---------------------------------------------------------------------------------------------------------------------*/
.grid {
    display: grid;
    gap: 10px;
    grid-template-columns: repeat(4,100px);
    grid-template-rows: repeat(4,100px);
}
/*grid-template-area를 안쓰고 layout을 만들 수도 있음.
이때 아래 요소들에게 각각 column과 row가 어디서 시작하고 어디서 끝날지 얘기해주면 됨.*/

.header {
    grid-column-start: 1; /* area와 같은 모양이려면 1→1*/
    grid-column-end: 2; /* area와 같은 모양이려면 2→5*/
} /*이렇게 지정해주면 아무 변화도 안생기는데 이유는 grid-column-start와 end는 각 column을 의미하는게 아니라 line을 의미함.
그래서 첫번째 줄에서 시작해서 두번째 줄에서 끝난다고 이해하면되며, 박스의 첫번째 세로줄에서 2번째 세로줄까지니까 그냥 처음 박스모양이 그대로 유지가 되는 것!!
그래서 end를 3을 주면 모양이 변하는데 2번째 박스의 첫번째 줄까지 차지함. */

.content{
    grid-column-start: 1;  /*좀더 짧게 쓰는 방법(shortcut)→ grid-column : 1 / 4; */
    grid-column-end: 4; 
    grid-row-start: 2; /*위 방법보다 좀 더 쉽게하는 방법 → 시작부터 끝나는 라인까지 일일히 셀 필요없이 어디부터 시작이고 어디가 끝인지 알면 됨..
    예를 들어 4x4 grid가 있을 때 line 순서는 1,2,3,4,5 이고 끝에서 부터 -1,-2,-3,-4,-5 이렇게 셀 수 있음. 즉 맨 마지막 line은 5도 될 수 있지만 -1도 됨.
    그래서 grid-row : 2 / -2 와 같이 쓸 수 있음!*/
    grid-row-end: 4;
}

.nav {
    grid-row-start: 2; /*또 좀 더 지름길이 있음!! → 시작과 끝을 적는 대신에 span을 사용할 수 있음. span은 시작점과 끝점을 적는걸 대신함. 얼마나 많은 cell을 갖는지임.
    .nav의 경우 grid-row : span 2 와 같이 쓸 수 있음. 단, 간혹 시작지점을 적어줘야 할때도 있는데 그때는 grid-row: 2 / span 2; 와 같이 적어줌. 의미는 2번째 line부터 시작해서 2개의 cell에 적용.*/
    grid-row-end: 4;
}
.footer{
    grid-column-start: 1;
    grid-column-end: 5;
}

/*이렇게 설정하면 아까 area를 쓴 것과 같은 모양이 됨!!*/

/*--------------------------------------------------------------------------------------------------------------*/

/*각 line에 naming을 해줄 수 있음. 그러나 잘 사용하지는 않음.
만약 이름을 붙이고 싶다면.. grid-template-columns: [first-line] 100px [sexy-line] 200px....과 같이 이름을 붙일 수 있고
grid-column: fist-line / sexy-line; 과 같이 사용가능!*/

/*--------------------------------------------------------------------------------------------------------------*/

/*fr이란? fraction(부분)의 줄임말로써 측정 단위임.(px,%와 같은)*/
.grid{
    display: grid;
    gap: 10px;
    grid-template-columns: repeat(4,100px);
    grid-template-rows: repeat(4,100px);
}에서 100px를 1fr로 바꾸면..
body의 모든 부분을 가짐.
즉 fr은 사용가능한 공간을 뜻함.
그래서 공간을 가질 수 있는 만큼 가지고 4번 똑같이 나누자!
그런데 가능한 공간이라는 것은 grid에서의 가능한 공간이라는 말임.
만약 grid의 너비가 500px이라면 500px안에서 4번을 반복하니까 처음보다 줄어듦. 공간을 navigatior에서 얻는게 아니라 grid container에서 얻음.

.grid{
    display: grid;
    gap: 10px;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: repeat(4,100px);
}
여기서 이 template column은 모두 같은 fr을 가짐.(4개의 같은 부분)
여기서 fr의 장점을 볼 수 있는데 4개의 column, 100px와 같이 숫자로 이렇게 설정하는 것처럼 그렇게 할 필요가 없이 유연한 layout얘길 할 수 잇음.
예를 들어 pc에서의 100px은 우리가 봣을때 적당하지만 휴대폰이나 기타 기기로 봤을 때 100px는 매우 큰 비중을 차지하기 때문에!

이제 px대신 %나 fr을 쓸거임.
fr은 그냥 몇번인지만 적어주면 됨.
아래 예시를 보면
.grid{
    display: grid;
    gap: 10px;
    grid-template-columns: 4fr 1fr 1fr 1fr;
    grid-template-rows: repeat(4,100px);
}
→ 이렇게 바꿔주면 1번째 column이 다른 것보다 4배 커짐.

이제 row에도 적용을 해보면,

.grid{
    display: grid;
    gap :10px
    height: 50vh  /*내 화면의 절반 크기*/
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(4,1fr);
}
만약 height를 설정하지 않았다면 화면에 아무것도 표시가 되지 않을텐데 이유는 fr은 grid에서의 가능한 공간만큼 차지하는데 높이가 따로 지정이 안되었기 때문에
하나의 줄로만 표현되서임.

/*---------------------------------------------------------------------------------------*/
⭐⭐grid-template

.father{
    display: grid; 
    gap: 10px;
    height: 50vh;
    grid-template: /*grid-template에서는 cell의 이름을 사용하므로 grid-area의 이름을 같이 각 요소에 지정해줘야함.
    area와 다른점은 row의 높이를 구체적으로 정해야 한다는 것!! 즉, 예를들어 column이 4개 있고 그 row의 높이가 얼마나 되는지*/
    "header header header header" 1fr
    "content content content nav" 2fr
    "footer footer footer footer" 1fr / 1fr 1fr 1fr 1fr;/*각 column마다 폭이 어떻게 되는지 / 이후 적어줌.*/
    /*또, naming을 해줄 수 있는데 앞이나 뒤쪽에 할 수 있고 하려면 모두 이름을 지정해줘야 함. 잘 사용하지는 않음..*/
    /*예시) [header-start]"header header header header" 1fr [header-end]*/
    /*또한, grid-template에서는 repeat을 사용하지 못함!!!*/
}

.header{
    grid-area: header;
}
.content{
    grid-area: content;
}
.nav{
    grid-area: nav;
}
.footer{
    grid-area: footer;
}

이렇게 했을 때의 장점!!
1. 화면크기가 변해도 비율이 똑같이 유지됨.

/*---------------------------------------------------------------------------------------*/
⭐Place Items : align-items(수직) justify-items(수평)
예시) place-items: stretch center;

이제 div들이 content를 가졌다고 가정.(content가 없다면 높이와 너비가 없기 때문에 아무런 변화가 보이지 않음.
width와 height를 따로 지정하면 기본크기가 되기 때문에 늘어나는 등의 변화는 볼 수 없음.)

justify-items, align-items와 같은 property는 부모요소에 있음. (grid-container과 같은)

justify-items(수평)의 기본 값은 stretch임.
즉 grid-container는 모든 grid 자식을 갖고 있고 자식들을 늘여서 본인을 채우게 함.
다시 말해 stretch는 grid-container가 grid를 갖고 있고 grid를 늘여서 grid 자체를 채우게 함.

justify-items:start는 grid가 같은 크기의 row와 column을 여전히 갖고 있긴 하지만
item들은 쭉 늘어있지 않고 시작부분에서 content의 크기만큼 자리를 차지하고 있음.
justify-items:center;, justify-items:end; 도 마찬가지임.

이건 align-items(수직)에서도 동일함. 기본값은 stretch이며, 
align-items:end에서는 가로로 쭉 늘어져 있지만 수직으로는 맨 아래 content의 높이만큼만 올라와 있음.
center, start도 마찬가지.

/*---------------------------------------------------------------------------------------*/
⭐ Place Content는 grid의 content를 정렬하는 방법.

place content : align-content(수직) justify-content(수평)

예시) place-content: end center;

align-items에서 item은 셀 중의 각 하나, justify-content에서 content는 전체 grid임.

justify-content의 기본값은 start임.
만약 justify-content: center; 이면 이게 grid를 중앙에 위치시킴.
주의해야 할 점은 grid-container(grid element)를 옮기는게 아님.
grid container는 100%의 width를 가지고 있음. 근데 justify-content는 grid 자체만을 움직이는 것!!!
center, end, start, stretch, space-around, space-evenly, space-between.

align-content도 동일함. 차이점은 모든 grid를 수직으로 옮긴다는 점.

/*---------------------------------------------------------------------------------------*/
cell들이 있는 방향을 stretch,center,bottom 또는 뭐가 됐던지 바꾸는 거에 대해 ..근데 개별적으로!!
⭐align-self, justify-self, place-self

.father{
    display: grid; 
    gap: 10px;
    height: 50vh;
    grid-template-columns: repeat(4, 100px)
    grid-template-rows: repeat(4, 100px)
}

.header{
    background-color: aquamarine;
    align-self:end;
    justify-self: center;
}
여기서 align-self라고 하는 것을 넣어주면 해당 child에만 적용됨. 
justify-self도 마찬가지!!

shortcut!
place-self : align-self(수직) justify-self(수평)
ex. place-self : end center;

/*---------------------------------------------------------------------------------------*/
⭐grid-auto-rows, grid-auto-flow, grid-auto-column

html에 class 이름이 item인 div가 50개쯤 있다고 가정.

.father{
    display: grid; 
    gap: 10px;
    height: 50vh;
    grid-template-columns: repeat(4, 100px)
    grid-template-rows: repeat(4, 100px)
    grid-auto-rows : 100px
}
.item:nth-child(odd){
    background-color: #2ecc71;   
}
.item:nth-child(even){
    background-color: #3498db;
}
위와 같을 때 grid는 4x4 크기의 격자형태인데..
html에서 입력한 div의 갯수가 더 많은 상황임. 즉 element가 더 많음.

이럴때 화면에 출력해보면 column 넓이는 같지만 row가 없는 모습임.
매번 몇개의 row가 더 있어야 하는지 일일히 세어가면서 할 수 없으니 
grid-auto-rows라는 걸 사용할 거임.
이것의 의미는 만약 더 많은 content가 있으면 우리가 따로 row를 지정해주지 않아도 default value을 자동으로 줘서 row를 생성한다는 의미.
grid-auto-rows : 100px 와 같이 사용.
만약 100px가 아니고 200px를 auto-rows에 지정하면 16번째 이후 div에서부터 적용됨.(계획과 다른부분부터)

grid-auto-column으로 넘어가기 전에 짚고 넘어가야 하는 것이 grid-auto-flow임.
위에서 grid-auto-rows를 설정학시 전에 일어났던 일은 grid가 끝날 때 마다 css는 사이즈가 없는 여분의 div를 넣고 있음.
새로운 row들을 자동으로 만들고 있음.
그런데 만약 내가 원하는게 새로운 row를 만드는 것보다 새로운 column을 만들기를 원한다면 grid-auto-flow로 같이 바꿔야함.
.father{
    display: grid; 
    gap: 10px;
    height: 50vh;
    grid-template-columns: repeat(4, 100px)
    grid-template-rows: repeat(4, 100px)
    grid-auto-flow:column;
}
 row의 수보다 더 많은 div가 있을 때, 더 많은 row를 만드는 것이 아니라 column을 만듦.
 그러면서 순서도 바뀜.(좌에서 우로 1,2,3,4 ... 가 아니라 위에서부터 아래로 1,2,3,4...)
 마치 flexbox direction처럼..
 
 여튼 이렇게 해놓으면 flow가 column이고 설정한 것보다 더 많은 element를 가질 때, grid-auto-column를 사용함!
 grid-auto-column:100px와 같이..

 /*---------------------------------------------------------------------------------------*/

⭐MinMax
얼마나 작게 혹은 크게 element가 될 수 있는지 지정할 수 있도록 해줌.
예를 들어 element가 가능한한 매우 크기를 원하는데! 동시에!! 엄청 작게 되진 않긴 원할 때 사용.

만약 이 items가 얘네들이 원하는 만큼 충분한 공간을 가지고 있었으면 한다. 그런데 얘네들이 줄어들더라고 너무 많이 안줄었으면 좋겠을때가 
minmax를 쓸때임.
grid-template-columns: repeat(10, minmax(100px, 1fr))같이 minmax를 적용!
이 item이 최소 100px는 되야하고 최대치는 1fr임. 

.father{
    display: grid; 
    gap: 10px;
    height: 50vh;
    grid-template-columns: repeat(10, minmax(100px, 1fr))
    grid-template-rows: repeat(4, 100px)
    grid-auto-column : 100px;
}
.item:nth-child(odd){
    background-color: #2ecc71;   
}
.item:nth-child(even){
    background-color: #3498db;
}
만약 이렇게 하고 div를 12개 정도 주고 화면 크기를 줄이면 어느 순간 횡스크롤이 생김. 왜냐하면 최소사이즈를 정해놨기 때문에.

 /*---------------------------------------------------------------------------------------*/

 ⭐⭐auto-fill / auto-fit

 grid를 이용해서 반응형 디자인을 만들 수 있는지..특히 auto-fill / auto-fit를 이용해서..
 auto-fill / auto-fit는 repeat function에만 사용할거임.

 각각 grid를 만들어줌.
auto-fill
 <div class="grid">
   <div class="item">1</div>
   <div class="item">2</div>
   <div class="item">3</div>
   <div class="item">4</div>
   <div class="item">5</div>
</div>   

auto-fit
<div class="grid">
  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
  <div class="item">4</div>
  <div class="item">5</div>
</div>  

.grid:first-child{
    gird-template-column: repeat(auto-fill, minmax(100px, 1fr));
} 
특정한 수치를 적어주기 보단 이 경우 여기서 auto-fill이 하는 일은 column을 가능한 한 많이 만들어줌. 주어진 사이즈 안에서.
비어있는 column일지라도 column을 만들어서 해당 row를 채움.

.grid:last-child{
    gird-template-column: repeat(auto-fit, minmax(100px, 1fr));
}
auto-fit이 하는 일은 현재의 element를 쭉 늘려서 row에 딱 맞게 해주는 일을 함.

fill은 채우고 fit은 맞춰준다라고 생각하면 편함.

매우 중요함. 작은화면에선 같은 크기를 갖고 있지만 화면이 커지면 하나는 점점 커지고, 다른 하나는 그대로 있음.

그래서 만약 6번째 div가 추가되면 fill에 오면 column중 빈공간 하나를 고름.
근데 fit은 6번째가 오면 row안에 맞추기 위해 다른 element들의 사이즈가 작아짐.

 /*---------------------------------------------------------------------------------------*/

 ⭐min-content / max-content 매우 유용함!!!
 이제 더이상 사이즈에 연연하지 않고 브라우저가 content의 크기에 따라 조절가능.
 위 2개가 의미하는 것은 크기, 즉 fr처럼 사이즈를 뜻함.

 생각했던 content 사이즈를 디자인할 수 있음.

 min-content는 만약 box를 만든다고 하면 content가 작아질 수 있는 만큼 작아지는 것이고
 max-content는 박스를 content가 필요한 만큼 크게 만드는 것.

 .grid{
    color:white;
    display:grid;
    gap:5px
    grid-template-columns: max-content min-content;
    grid-auto-rows: 100px;
    margin-bottom: 30px
 }
 .item:nth-child(odd){
    background-color: #2ecc71;   
}
.item:nth-child(even){
    background-color: #3498db;
}
위처럼 max-content를 지정하면 box가 필요한 content 크기만큼 커진 것을 볼 수 있음.
또한, 위처럼 min-content를 지정하면 content가 얼마나 작게 될 수 있냐임.

이 property의 장점은 minmax와 repeat function, auto-fill, fit과 같이 결합했을 때 볼 수 있음!!

grid-template-columns: repeat(5, minmax(max-content, 1fr));
grid-template-columns: repeat(auto-fit, minmax(20px, max-content));
와 같이!

