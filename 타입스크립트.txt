---타입스크립트 설치-----------------------------------------

기존 리액트 앱에 타입스크립트를 설치하려면 
npm install --save typescript @types/node @types/react @types/react-dom @types/jest

이런 식으로 따로따로 설정해주어야 하는데

그냥 속편하게 리액트 앱을 만들때부터 같이 설치해주면 좋음.
npx create-react-app 내 앱 이름 --template typescript
npm i --save-dev @types/styled-components
npm i styled-components

----------------타입스크립트-----------------------------------------

다른 대부분의 언어는 만약 변수를 선언한다면 타입을 선언해줌.
하지만 자바스크립트는 포용적이라 그런 부분에서 제한이 없다보니 오류가 많이 발생.
그래서 이런 점을 보완한 것이 타입스크립트.

좋은 점은 런타임 전 오류를 반환한다는 점.

코드 작성 간 보호장치라고 생각하자.

--------------명시적 타입/암묵적 타입-------------------------

데이터와 변수의 타입을 명시적으로 정의할 수 있고
아니면 그냥 자바스크립트처럼 변수만 생성하고 넘어가면 타입을 추론해줌.

let a = "hello"
a= 1  → 오류!! 타입스크립트에서는 이걸 허용하지 않음. 

let b : boolean = 'x' → 오류. 타입스크립트 문법으로 b는 불리언 타입이라고 선언햇는데 문자가 들어왔으니 오류반환.
let b : boolean = false → ok! 이런식으로 : 타입 을 써주는 것이 명시적 타입.

let c = [1,2,3]
c.push("1") → 오류. 숫자로 된 배열에 문자를 넣으라고 하니..

let c : number[] = [] 이렇게 배열 타입을 명시해줄 수 잇음. 기억!!
: 타입 입력해주는 것 기억!!!

const player = {
    name : "nico"
}
player.name = 1 → 오류. 타입스크립트에서 오브젝트의 name의 값은 문자라고 추론. 
player.hello() → 오류. hello라는 key값이 없기 때문에.

----------------------타입스크립트의 타입---------------------------------------
지금까진 number, array, boolean, string에 대해 알아봣다면 다른 타입들에 대해 알아볼거임.

<opitonal 타입>
오브젝트에 타입을 주는 방법!

예시) player라는 오브젝트가 잇고 그들 중 몇몇은 age가 있고 몇몇은 age가 없다고 가정. 이걸 어떻게 타입스크립트에 쓸 수 있을까
player가 age를 가지고 있거나 가지고 있지 않고 name을 가지고 있을 때,

const player : {
   name : string,
   age : number
} = {
   name : "nico"
}
오브젝트 타입이라고 해서 : {} 콜론 옆에 중괄호만 쳐줘선 안되고 안에 들어가는 값들에 대한 타입도 지정을 해주어야 함.
여기까지 해주면 player라는 오브젝트에 name은 문자열이 들어가고 age에는 숫자가 들어간다고 타입스크립트한테 얘길 해준 상태.
그런데 지금 이상태에선 타입스크립트에서 오류를 줄거임.
왜냐하면 age값이 숫자로 명시되어 있는데 오브젝트 내 age라는 것을 찾을 수 없기 때문임.
그런데 우린 age를 선택적으로 만들어주고 싶음.
그럴 땐 ?만 콜론: 앞에 추가하면 됨.

const player : {
   name : string,
   age ?: number
} = {
   name : "nico"
}

이 상태에서 player를 보게 되면 플레이어는 오브젝트 타입이고 name은 string, age는 number 이거나(|) nudefined 라고 타입스크립트가 이해한 것을 볼 수 있!

이게 선택적 변수(optional parameter)를 지정하는 방법임.

<type Alias(별칭)>

만약 player가 아래와 같이 엄~~청 많다면
const playerNico : {
   name : string,
   age ?: number
} = {
   name : "nico"
}

const playerLynn : {
   name : string,
   age ?: number
} = {
   name : "nico",
   age : 12
}
이런식으로 똑같이 player마다 타입을 지정해줘야 함. 하지만 이건 너무 번거롭기 때문에 아주 편리한 기능이 있음. Alias타입을 생성하는 것.

type Player = {
  name : string,
  age ?: number
}

이렇게 type Alias명 {} 과 같이  Alias를 생성하고 나면..

const playerNico : Player = {
   name : "nico"
}

위와 같이 해당 오브젝트 이름 옆에 : Alias명  콜론 별칭을 붙여주면 됨!!
물론 다른 타입에도 Alias 생성이 가능!

<함수의 return값의 타입 지정>

type Player = {
  name : string,
  age ?: number
}
이상태에서 예시로 함수를 하나 만들건데 그 함수는 player의 object를 만들고 그 결과로 player를 반환할거임.

function playerMaker(name:string){
   return {
      name : name
}
}
여기서 ()안의 argument에 타입을 주는 방법은 보다시피 const나 let과 같은 방식!

이제 player오브젝트를 만들고 리턴할거임.
function playerMaker(name:string){
   return {
      name : name
}
}
이 상태에서 playerMaker라는 함수를 보면 타입스크립트는 이 함수가 타입이 string인 name이 들어있는 오브젝트를 리턴하는 것만 알고 있음.

그런데 그거말고 타입스크립트에게 playerMaker는 Player 타입을 리턴하고 있다고 말해주고 싶음.
즉 함수가 리턴하는 타입을 Player라고 알려주고 싶음!!

function playerMaker(name:string) : Player {}

위와 같이 변수들과 인자에 해줫던 그대로 해주면 이제 타입스크립트는 playMaker함수가 stirng타입으로 name을 받고 Player 타입을 return하는 함수라고
인식.

그럼 만약 arrow function일 때는 어떻게 쓸까??

const playerMaker = (name: string) : Player => ({name}) 

똑같이 콜론 타입 순으로 써주면 됩니다.

그런데 => 다음에 ({name})이 머지?
> - 화살표 함수에서 리턴 값을 객체로 반환하는 경우에는 (parameter) => {} 이렇게만 쓰면 {} 부분이 함수 본문인지.. 객체인지 구분이 안되기 때문에
({})이렇게 묶어줘서 return값이 객체임을 확실히 함.
그리고 name : name이 아니라 name인 이유는 key와 value이름이 똑같다면 short cut해서 name만 쓸 수 있습니다!


--------------------------------타입스크립트의 타입 2--------------------------------------------

더 많은 타입을 살펴보자!

<readonly>
원하면 readonly 속성을 타입에 추가할 수도 있음.
즉 요소들을 읽기 전용으로 만들 수 잇음.
자바스크립트에는 없는 기능!

type Player = {
   name : string,
   age : number
} 에서
읽기 전용으로 만들 요소에 readonly 를 붙여주면 됨.

type Player = {
  readonly name : string,
  age : number
}

이제 저 요소를 수정하려고 하면 타입스크립트의 동작이 멈춤. 읽기 전용이기 때문!

다른데에도 추가가 가능함.
numbers라고 하는 숫자 array에 붙여보면
const numbers : readonly number[] = [1,2,3,4]

numbers.push(1)을 하면 오류가 남. 왜냐! numbers라고 하는 array는 읽기전용이기 때문.

<Tuple>
Tuple은 array를 생성할 수 잇게 하는데 최소한의 길이를 가져야 하고 특정위치에 특정 타입이 있어야 함.

예를 들어 array하나를 만드는데 이름, 나이, 챔피언 여부 순으로 된 array를 만든다고 가정하면

const player : string[] = [] 이런식으로 만드는게 아니라

const player : [string, number, boolean] = [] 이렇게 만들면 됨. 그런데 지금은 배열에 아무것도 입력을 안햇으니 타입스크립트에선 3개의 요소가 필요한데
아무 것도 없어서 오류를 줌.

const player : [string, number, boolean] = ["nico", 12, true] 입력하면 끗.

그냥 이런 기능을 사용하면 항상 정해진 갯수의 요소를 가져야 하는 array를 지정할 수 잇다는 것을 기억하면 됨!!

<undefined, null>

<any>

any는 타입스크립트로부터 빠져나오고 싶을 때 사용.
보통 비어잇는 값을 선언하면 타입이 any라고 인식됨.

let a = []  여기서 타입스트립트는 기본적으로 a을 any의 array라 생각.

근데 any는 많이 쓰지 않는 것이 좋음. any를 쓰면 자바스크립트와 다를게 없기 때문이지.

<void>

아무것도 리턴하지 않는 함수를 대상으로 함.

function hello(){
  console.log('x')
}
에서 함수 hello는 void 타입이 됨. void타입은 별도로 타입을 지정해주지 않아도 됨.


<never>

많이 사용하진 않지만, never은 함수가 절대 return하지 않을 때 발생함. 
예를 들어 함수에서 예외가 발생할 경우

function hello() : never {
  return "x"
}
이렇게 하면 오류가 생김.

반대로 
function hello() : never{
  throw new Error("xxx")
}
이건 받아들여 지는데 이건 return하지 않고 오류를 발생시키는 함수임. 이럴때 never를 사용.

<unknown>
변수 타입을 미리 알지 못할 경우 사용.
그러면 타입스크립트가 강제로 확인 작업을 시킴.

let a: unknown;
이렇게하면 타입스크립트로부터 보호를 받게 됨.

그냥 let a:unknown;
let b = a + 1 이라고 하면 타입스크립트는 a의 타입을 모르기 때문에 오류를 나타내는데
그럴 땐

if(typeof a === 'number'){
   let b = a + 1;
}

와 같이 조건문 범위 안에서는 a가 number 타입이 되도록 해줌 됨.

--------------------------------------------------------------------

--------------------------타입스크립트에서의 함수---------------------------

<call signature>
함수 위에 마우스를 올렸을 때 보게 되는 것을 말함.

만약 
const add = (a:number, b:number) => a + b 이런 함수가 있다고 가정하면
타입스크립트는 a,b가 number 타입이기 때문에 a+b가  number라고 즉, 이 함수가 number타입을 리턴한다고 추론.

마우스를 함수에 올리면
const add : (a : number, b : number) => number 이렇게 표시되는데 이건 우리가 함수를 어떻게 호출해야하는 것인지 알려줌.
이런게 call signature인데,

우리만의 call signature를 만드는 방법은

type Add = (a : number, b : number) => number;
이게 바로 함수의 call signature 타입을 만드는 방식임.

그리고 나서 함수에 위 타입을 넣어주면 됨.

const add : Add = (a, b) => a+b 이렇게 하면 타입스크립트는 아무런 오류를 보여주지 않을건데 이유는 우리가
 Add라는 call signture를 만들어 놨고 그걸 add함수의 타입으로 지정했기 때문에 타입스크립트도 a,b가 넘버이고 a+b도 넘버타입인걸 알기때문

이 말은 함수를 구현하기 전에 그 함수의 타입을 먼저 설명하고 함수를 구현할 수 있다는 것임!!!

이거 리액트에서도 엄청 많이 씀.

<overloading>

함수가 서로 다른 여러 개의 call signature를 가지고 있을 때 실행시킴. 
인자의 갯수가 다를 수도 있고 인자의 타입이 다른경우도 있음.

상당히 많이 나옴.

<Polymorphism>(다형성)

사전적으로 해석하면 많은 구조, 여러가지 다른 형태들 이라는 뜻.
기본적으로 함수는 여러가지 다른 모양을 가지고 있음.

예를들어 배열을 받고 그 배열의 요소를 print해주는 함수를 만들어 볼거임.

1. call signature와 함수를 만든다.
2. 그리고 arr을 forEach문을 통해 arr의 요소를 console.log에 찍어볼거임.
type SuperPrint = {
  (arr : number[]) : void
}

const superPrint : SuperPrint = (arr) => {
   arr.forEach(i => console.log(i))
}

여기서 문제가 있는데 숫자로 배열을 받을 수도 있고 불리언으로 받을수도, 오브젝트로 받을 수도 있고 뭐든 배열로 받을 수 잇음.
그렇기 때문에 만들어둔 call signture에 arr의 타입을 추가.

type SuperPrint = {
   (arr : number[]) : void
   (arr : booleand[]) : void
}
이로써 이제 superPrint함수에 number타입의 배열을 보낼 수도 있고, 불리언 타입의 배열을 보낼 수도 있음.
superPrint([1,2,3,4])
superPrint([true, false, false, true])

그러나 string타입으로 배열을 보내면 에러가 뜸.
그럼 또 string타입의 배열도 가능하다고 call signature에 추가해야 할까??
할 수는 잇지만 여기서 다향성을 활용하는 좋은 방법이 있음.

먼저,
concrete type 이란 우리가 전부터 봐왔던 타입을 말함. 숫자, 문자열, void, unknown 과 같은..

이제 우리는 타입스크립트한테 generic 타입을 받을거라고 알려줄건데
generic type은 타입의 placeholder 같은 것이고 concrete 타입을 사용하는 것 대신 쓸 수 있음.

예를 들어 지금 우리의 문제는 보다시피 콜 시그니처에 3개가 있음. 만약 [1,2,true,false] 와 같은 배열을 넣는다하면 또 타입스크립트는 오류을 뱉어냄.
콜 시그니처에 이런 타입을 못봤기 때문.
그럼 매번 모든 경우의 수를 따져서 입력해야하나??

그래서 그 대신 우리는 generic을 사용할 거임.
다시말해 call signature 를 작성할 때, 여기 들어올 확실한 타입을 모를 때, generic을 사용함.

사용하는 방법
1. 먼저 타입스크립트에 generic을 사용하고 싶다고 알려줘야 함.

type SuperPrint = {
   (arr : number[]) : void
}
이 안에서 사용할건데 ()안에 argument가 제네릭을 받는다고 알려주는 것.

type SuperPrint = {
   <TypePlaceholder>(arr : number[]) : void
}
<TypePlaceholder> <>안에 작명은 자유롭게. 근데 보통 T나 V를 많이 씀. 지금은 이해를 돕기위해 TypePlaceholder라고 작명.
이것이 타입스크립트에게 이 call signature가 제네릭을 받는다는 것을 알려주는 역할.

그리고 기존에 있던 number를 TypePlaceholder로 바꿔주야 함.
type SuperPrint = {
   <TypePlaceholder>(arr : TypePlaceholder[]) : void
}

이러면 [1,2,true,false] 이런 배열을 넣어도 해결.
타입스크립트는 배열 안의 값을 보고 타입을 유추함. 그리고 기본적으로 그 유추한 타입으로 call signature를 보여줌.

그럼 이런 의문이 드는데 any와 generic의 차이가 뭐지...

그에 대한 답변은
'any'를 사용하는 것은 어떤 타입이든 받을 수 있다는 점에서 'generics'과 같지만 함수를 반환하는데 있어 'any'는 받았던 인수들의 타입을 활용하지 못한다

즉, 'generics'은 어떤 타입이든 받을 수 있다는 점에서 'any'와 같지만 해당 정보를 잃지 않고 타입에 대한 정보를 다른 쪽으로 전달할 수 있다는 점이 다르다
임.

<Generics>
함수뿐만아니라 매우 다양한 곳에서 활용!!! 반드시 알아둡시다!!

여태 우리가 함수의 call signature를 직접 작성하고 거기에 제네릭을 사용했는제
지금처럼 직접 작성하는 경우는 거의 없음. 대부분 라이브러리를 사용하기 때문에.
리액트나 넥스트js를 이용할 때 제네릭을 사용할거임. 

지금까지 한걸 정리해보면

type SuperPrint = <T>(a : T[]) => T

const superPrint : SuperPrint = (a) => a[0]

const a = superPrint([1,2,3,4])
const b = superPrint([true, true, false])
const c = superPrint(["a","b","c"])
const d = superPrint([1,2,true,false,"hello"])

우리가 call signature를 직접 생성해주고 함수에서 타입으로 작용하고 있음.

그러나 이 모든걸 일반 함수로도 쓸 수 잇음.

function superPrint<V>(a : V[]){
   return a[0];
}
const a = superPrint([1,2,3,4])
const b = superPrint([true, true, false])
const c = superPrint(["a","b","c"])
const d = superPrint([1,2,true,false,"hello"])

만약 여기서 a에 boolean 타입을 넘겨준다면,,,
const a = superPrint<boolean>([1,2,3,4])
에러가 발생함. 
이유는 타입스크립트에 overwrite 했기 때문.
그래서 항상 타입스크립트가 타입을 유추하도록 하는 것이 좋음.

실제 제네릭 사용 예시) 타입 확장.
새로운 타입을 만들고 그안에 string인 name과 모든 것이 될 수 있는 extrainfo가 잇는데 any는 보호를 받지 못하니 제네릭 사용.
type Player<E> = {
  name : string
  extraInfo : E
}
그리고 nico라는 오브젝트를 만들어보자. Player타입 옆에 <>안에는 extraInfo의 타입이 들어가야되겟지?
const nico : Player<{favFood : string}> = {
  name : "nico",
  extraInfo : {
     favFood : "kimchi"
}
}
만약 다른 플레이어는 extraInfo가 없다면?
const lynn : Player<null> = {
   name : "lynn",
   extraInfo : null
}
위와 같이 작성.


보다시피 제네릭을 이용하면 type끼리 일종의 재사용을 할 수 잇음.
만약 많은 것들이 있는 큰 타입을 하나 가지고 있는데 그 중 하나가 달라질 수 잇는 타입이라면 거기에 제네릭을 넣으면 됨.
또한, 커스텀한 타입에도 쓸 수 잇음.

제네릭은 함수뿐만 아니라 많은데서 사용됨.
예시)

type A = Array<number>

let a:A = [1,2,3,4]
이건 정상작동함.

또,

function printAllNumbers(arr: number[]) 숫자로 이루어진 배열을 갖는 함수를 만든다면 이렇게 써도 되고
제네릭을 이용하면 function printAllNumbers(arr : Array<number>) 이렇게 쓸 수 도 잇음.
위 형태는 매우 자주 볼거임.

리액트를 타입스크립트와 같이 사용하는 예시!!!
useState 라는 훅을 

useState() 이렇게만 사용하면 타입스크립트는 너의 state의 타입을 알 수 없음.

useState<number>() 이런식으로 사용해야 number타입의 useState가 되는 것임!!!!

----------------------------------타입스크립트의 class------------------------------------------------

자바스크립트에서의 class------------------------------------

class는 객체를 생성하기 위한 일종의 템플릿이다.
instance는 class를 기반으로 만들어진 실제 객체들.
constructor는 생성자 함수.
this는 우리가 만들 instance를 지칭.
sayHello()는 메서드 형태의 동사 표현

class 클래스명 {
  constructor (인자1, 인자2..) {
    this.name = 인자1;
    this.age = 인자2;
   }
   sayHello() {
      console.log(this.name + " hello")
   }
}

const 변수명 = new 클래스명('이름', '나이');
변수명.sayHello();
콘솔창에 우측과 같이 출력됨. → 이름 hello


ㅁ getter, setter
클래스를 통해서 객체(instance)를 생성,
constructor를 통해 정의한 property에 접근하고 셋팅하기 위한 getter, setter 개념.

class Rectangle {
  constuctor (height, width) {
    this._height = height;
    this._width = width;
}

}
const rectangle1 = new Rectangle(10, 20)

get, set 을 사용할 때는 this. 뒤에 _ (언더스코어)를 붙여줘야함. 언더스코어는 private의 의미를 가져서 변수가 겹치는걸 막아줌.


ㅁ 정적 메서드(static)
class Calculator {
   constructor(a, b){
    this.a = a;
    this.b = b;
}
   add (a, b) {
      return a + b
}
}
const cal = new Calculator();
cal.add(1,2)

원래 class에 메서드를 입력하는 방식은 위와 같은데,
단순하게 새로운 객체를 만들지 않고 클래스의 메서드만 이용하고 싶을 때. 즉, 클래스명.메서드() 이렇게 쓰고 싶다라고 하면
메서드 앞에 static을 붙여주면 되며, constructor도 없어도 됨.
class Calculator {
    static add (a, b) {
       return a + b
}
}
Calculator.add(1,2)

이런걸 정적 메서드라고 함.

-----------------------------------------------------------------------------------------------------------

이제 타입스크립트에서의 class에 대해 알아보자!!

// class Player {
//     constructor(
//         private firstName : string,
//         private lastName : string,
//         public nickNaem : string,
//     ){}
// }
// 자바스크립트와는 달리 constructor의 파라미터에 써주기만 하면 타입스크립트가 알아서 constructor함수를 만들어 줌.
// 그리고 보다시피 private 혹은 public property를 만들 수 있다.

// const nico = new Player("nico", "las", "니꼬")

// nico.firstName() 이 코드가 작동하지 않는 이유는 firstName이 private이기 때문.
//---------------------------------------------------------------------------
// abstract class User {
//     constructor(
//         private firstName : string,
//         private lastName : string,
//         public nickName : string,
//     ){}
//     getFullName(){
//         return `${this.firstName} ${this.lastName}`
//     }
// }

// class Player extends User{

// }

// const nico = new Player("nico", "las", "니꼬")

// abstract은 추상클래스라는 의미.
// 추상 클래스란? 다른 클래스가 상속받을 수 있는 클래스임.
// 하지만 이 클래스는 직접 새로운 instance를 만들 수는 없음.
// 예를 들어 new User()는 오류를 반환함.

// getFullName라고 하는 추상 메서드가 있다고 가정.
// 이 메서드는 firstName과 lastName을 리턴할거임.
// 그러면 User로부터 이 메소드를 상속받은 Player는 이걸 그냥 사용할 수 있다.
// 즉, nico.getFullName() 이 가능함.

// 그런데 만약 이 메서드를 private으로 만들면 더이상 위 코드가 작동하지 않음.
// private, public은 메서드에도 작용함.
// 자바스크립트에서는 위와 같은 오류가 전혀 나지 않음. 그리고 추상 클래스라는 것으로 구분되지도 않음.

// 추상클래스를 알아봣으니 추상메서드 라는 것은 추상 클래스를 상속받는 모든 것들이 구현해야 하는 메소드를 의미함.
// 즉, 코드가 없는 메서드. call signature만 가지고 있음.
// abstract getNickName():void 와 같이 써줄 수 있다.
// 그렇기 때문에 구현이 되지 않으면 오류가 발생함. 위 경우에는 Player가 추상메서드를 구현하지 않으면 오류발생.

// 아 그리고 Player가 User를 상속 받지만 Player에서는 this.nickName에 접근할 수 없음.
// 이유는 private으로 보호 받고 있기 때문이지.
// 필드를 보호하기 위한 방법은 protected, private, public 3가지가 있는데 먼저, private이 설정되어 있으면
// 해당 property는 인스턴스 밖에서 접근할 수 없고 다른 자식 클래스에서도 접근할 수 없음.(상속이 안됨)
// 그러므로 만약 외부로부터 보호되지만 다른 자식 클래스에서 사용되길 원한다면 private은 쓰지 않아야 함.
// protected는 가능하니 이런 경우 protected 사용을 권장함.


// ------------------------------------------------------------------------------------------

type Words = {
    [key : string] : string
}

// Words 타입이 string만을 프로퍼티로 가지는 오브젝트라는 뜻.
// 여태 본적없는 형식인데, 제한된 양의 property 혹은 key를 가지는 타입을 정의해주는 방법.
// 다시 말하자면 이건 오브젝트의 타입을 선언해야 할 때 사용.
// 이 오브젝트는 제한된 양의 property만을 가질 수 있고 그에 대해 미리 알지 못하지만 타입만 알고 있을 때 사용.

// 클래스를 타입으로도 쓸 수 있다.
//---------------------------------------------------------------------------------

// interface 는 오브젝트의 모양을 설명하는 방법 중 하나.
// interface 는 오직 한가지의 용도만을 가지고 있는데 오브젝트의 모양을 특정해주기 위함임.
// 리액트서 많이 사용함.

// 타입스크립트에게 오브젝트의 모양을 알려주는 방법은 2가지가 있음.

// 1. type 을 쓰고 오브젝트 모양을 써주는 방법.(type은 특정 값이나 객체의 값에 대한 타입을 지정할 수 있다.
// type alias를 만들 수 있다. 타입을 특정한 값을 가지도록 제한할 수 잇다.)

// type User = {
//     name : string
// }
// type Player = User & {
// }
// const nico : Player = {
//     name : "nico"
// }

// &는 and 연산자, | 는 or 연산자.


// 2. 다른 하나는 type대신 interface를 써주는 방법.

// interface User {
//     name : string
// }
// interface Player extends User {
// }
// const nico : Player = {
//     name : "nico"
// }


// type이 좀 더 활용성이 높음. 다양한 목적으로 활용가능.
// interface는 오직 오브젝트의 모양을 타입스크립트에게 설명해주기 위해서만 사용됨.
// 그러나 interface 사용을 권장함. 문법구조가 class 작성하는 것과 비슷해서 객체지향에 대해 이해하기 쉬움.
// interface는 타입스크립트에만 존재. 자바스크립트에선 인식을 못함.

// interface 상속
// extends 대신 implements 사용.
// interface를 상속하는 것의 문제점 중 하나는 private property들을 사용하지 못한다는 것.
interface User {
    firstName : string,
    lastName : string,
    sayHi(name : string) : string
    fullName(): string
}

class Player implements User{
    constructor(
        public firstName : string,
        public lastName : string
    ){}
    fullName(){
        return `${this.firstName} ${this.lastName}`
    }
    sayHi(name : string){
        return `Hello ${name}. My name is ${this.fullName()}`
    }
}



